import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:weatherapp/models/weathermodels.dart';
import 'package:weatherapp/models/list.dart' as zmer;
import 'package:weatherapp/widgets/otherday.dart';

Widget Week(BuildContext context, Autogenerated resultat) {
  if (resultat.list != null && resultat.list!.toList().isNotEmpty) {
    var today = DateTime.now();
    var days = [
      'Today',
      DateFormat.EEEE().format(today.add(const Duration(days: 1))),
      DateFormat.EEEE().format(today.add(const Duration(days: 2))),
      DateFormat.EEEE().format(today.add(const Duration(days: 3))),
      DateFormat.EEEE().format(today.add(const Duration(days: 4)))
    ];
    var tempsMin = [
      tempMinmoyDay(resultat.list!.toList(), 1),
      tempMinmoyDay(resultat.list!.toList(), 2),
      tempMinmoyDay(resultat.list!.toList(), 3),
      tempMinmoyDay(resultat.list!.toList(), 4)
    ];
    var tempsMax = [
      tempMaxmoyDay(resultat.list!.toList(), 1),
      tempMaxmoyDay(resultat.list!.toList(), 2),
      tempMaxmoyDay(resultat.list!.toList(), 3),
      tempMaxmoyDay(resultat.list!.toList(), 4)
    ];
    var description = [
      resultat.list!.toList()[0].weather!.first.main.toString(),
      resultat.list!.toList()[8].weather!.first.main.toString(),
      resultat.list!.toList()[16].weather!.first.main.toString(),
      resultat.list!.toList()[24].weather!.first.main.toString(),
      resultat.list!.toList()[32].weather!.first.main.toString()
    ];
    {
      return Stack(
        clipBehavior: Clip.none,
        alignment: Alignment.center,
        children: [
          Positioned(
            top: (MediaQuery.of(context).size.height) / 5 * 3,
            child: Container(
                width: (MediaQuery.of(context).size.width) / 10 * 9,
                height: (MediaQuery.of(context).size.height) / 5 * 2,
                decoration: BoxDecoration(
                  image: DecorationImage(
                    image: AssetImage("assets/images/Rectangle 4.png"),
                    fit: BoxFit.cover,
                  ),
                ),
                child: ListView.separated(
                  scrollDirection: Axis.vertical,
                  itemCount: 5,
                  shrinkWrap: true,
                  itemBuilder: (context, index) => OtherDay(
                      context,
                      days[index],
                      tempsMin[index].toString(),
                      tempsMax[index].toString(),
                      description[index],
                      index),
                  separatorBuilder: (context, index) => Divider(
                    thickness: 1,
                  ),
                )),
          )
        ],
      );
    }
  } else {
    return Text("");
  }
}

int tempMinmoyDay(List<zmer.List> temps, int n) {
  double s = 0;
  for (int i = n * 8; i < 8 * n + 8; i++) {
    s += temps[i].main!.tempMin!;
  }
  return s.floor();
}

int tempMaxmoyDay(List<zmer.List> temps, int n) {
  double s = 0;
  for (int i = n * 8; i < 8 * n + 8; i++) {
    s += temps[i].main!.tempMax!;
  }
  return s.floor();
}

String descr(List<zmer.List> list, int i) {
  return list[i].weather!.first.main.toString();
}
