// ignore_for_file: empty_constructor_bodies

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:http/http.dart';
import 'package:intl/intl.dart';
import 'package:weatherapp/cubit/weather_cubit.dart';
import 'package:weatherapp/models/main.dart';
import 'package:weatherapp/models/weathermodels.dart';
import 'package:weatherapp/widgets/textinput.dart';
import 'package:weatherapp/widgets/today.dart';
import 'cubit/weathercubit.dart';
import 'network/network.dart';
import 'widgets/citydate.dart';
import 'widgets/header.dart';
import 'widgets/week.dart';
import 'package:weatherapp/models/list.dart';

void main() {
  void main() => runApp(MyApp());
  /*try {
    Network()
        .getWeatherForecast(cityName: 'montpellier')
        .then((value) => runApp(MyApp(
              resultat: value,
            )));
  } catch (e) {}*/
}

// ignore: must_be_immutable
class MyApp extends StatelessWidget {
  MyApp({
    Key? key,
  }) : super(key: key);

  final Autogenerated resultat = Autogenerated();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        title: 'Flutter Demo',
        theme: ThemeData(
          primarySwatch: Colors.grey,
        ),
        home: BlocProvider(
            create: (context) => WeatherCubit(this.resultat),
            child: WeatherPage()));
  }
}

class WeatherPage extends StatelessWidget {
  final Color? blanc = Colors.white;
  String cityName = "";

/*
  List list = List();
  String weatherdescription = "";

  String temp = "";
  String max = "";
  String min = "";
  String feels = "";
  String humidity = "";*/
  @override
  Widget build(BuildContext context) {
    //BlocProvider.of<WeatherCubit>(context);

    String now = DateFormat.yMMMMEEEEd().format(DateTime.now());
    return BlocBuilder<WeatherCubit, Autogenerated>(
        builder: (context, resultat) {
      String weatherdescription = "";

      String temp = "";
      String max = "";
      String min = "";
      String feels = "";
      String humidity = "";
      if (resultat.city != null) {
        //resultat.list!.toList().isEmpty)

        weatherdescription = resultat.list!.toList()[0].weather.toString();
        temp = resultat.list!.toList()[0].main!.temp.toString() + "°C";
        feels = resultat.list!.toList()[0].main!.feelsLike.toString();
        max = resultat.list!.toList()[0].main!.tempMax.toString();
        humidity = resultat.list!.toList()[0].main!.humidity.toString();
        min = resultat.list!.toList()[0].main!.tempMin.toString();
      } else {}

      return Scaffold(
        body: Center(
          child: Container(
            alignment: Alignment.center,
            width: (MediaQuery.of(context).size.width),
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage("assets/images/blub.png"),
                fit: BoxFit.cover,
              ),
            ),
            child: Stack(
              clipBehavior: Clip.none,
              alignment: Alignment.center,
              children: [
                Stack(
                  clipBehavior: Clip.none,
                  alignment: Alignment.center,
                  children: [
                    Header(context),
                    Positioned(
                      width: (MediaQuery.of(context).size.width) / 4 * 3,
                      top: 110,
                      left: 10,
                      child: TextField(
                        style: TextStyle(color: Colors.white),
                        autofocus: false,
                        onSubmitted: (text) => {
                          cityName = text,
                          context.read<WeatherCubit>().get(text)
                        },
                        cursorColor: Colors.white,
                        decoration: InputDecoration(
                          enabledBorder: UnderlineInputBorder(
                            borderSide: BorderSide(color: Colors.white),
                          ),
                          focusedBorder: UnderlineInputBorder(
                            borderSide: BorderSide(color: Colors.white),
                          ),
                          prefixIcon: Icon(Icons.search, color: blanc),
                          labelText: 'City',
                          focusColor: blanc,
                          hoverColor: blanc,
                          labelStyle: TextStyle(color: blanc),
                          fillColor: Colors.white,
                        ),
                      ),
                    ),
                    Positioned(
                      top: 20,
                      child: SizedBox(
                        width: (MediaQuery.of(context).size.width) / 10,
                      ),
                    ),
                  ],
                ),
                Stack(
                  clipBehavior: Clip.none,
                  alignment: Alignment.center,
                  children: [
                    Today(context, cityName, now, weatherdescription, temp,
                        feels, humidity, min, max
                        //resultat.list!.toList()[0].weather.toString(),
                        //resultat.list!.toList()[0].main!.temp.toString() + "°C",
                        //resultat.list!.toList()[0].main!.feelsLike.toString(),
                        //resultat.list!.toList()[0].main!.tempMax.toString(),
                        //resultat.list!.toList()[0].main!.humidity.toString(),
                        //resultat.list!.toList()[0].main!.tempMin.toString(),
                        ),
                  ],
                ),
                Positioned(child: Week(context, resultat))
              ],
            ),
          ),
        ),
      );
    });
  }
}
